name: Build and Push to GHCR (Manual Dispatch, Auto Link to Repo)

on:
  workflow_dispatch:

env:
  VERSION: 0.0.1

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    outputs:
      image_name: ${{ steps.vars.outputs.image_name }}
      image_name_version: ${{ steps.vars.outputs.image_name_version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set lowercase image name
      id: vars
      run: |
        IMAGE_NAME="ghcr.io/$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]'):latest"
        IMAGE_NAME_VERSION="${IMAGE_NAME%:latest}:$VERSION"
        REPO_URL="https://github.com/${{ github.repository }}"
        echo "image_name=$IMAGE_NAME" >> $GITHUB_OUTPUT
        echo "image_name_version=$IMAGE_NAME_VERSION" >> $GITHUB_OUTPUT
        echo "repo_url=$REPO_URL" >> $GITHUB_OUTPUT

    - name: Write Dockerfile inline
      run: |
        cat <<EOF > Dockerfile
        FROM alpine:latest
        ARG VER_TEST
        LABEL org.opencontainers.image.source="${{ steps.vars.outputs.repo_url }}"
        LABEL org.opencontainers.image.description="Testing desc"
        LABEL version=\$VER_TEST
        CMD ["sh", "-c", "echo Image version is \$VER_TEST"]
        EOF

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build Docker image
      run: |
        docker build \
          --build-arg VER_TEST=$VERSION \
          -t ${{ steps.vars.outputs.image_name }} \
          -t ${{ steps.vars.outputs.image_name_version }} .

    - name: Push Docker images
      run: |
        docker push ${{ steps.vars.outputs.image_name }}
        docker push ${{ steps.vars.outputs.image_name_version }}

  run-image:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Pull and run container
      run: |
        docker pull ${{ needs.build-and-push.outputs.image_name_version }}
        docker run --rm ${{ needs.build-and-push.outputs.image_name_version }}
